quant_transform_check <- weak_effects_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_untransformed = sapply(biomarker_transformed, inv_log_quant_transform,
min = 0, max = q_999999)) |>
mutate(diff = biomarker - biomarker_untransformed)
quant_transform_check
quant_transform_check <- weak_effects_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_untransformed = sapply(biomarker_transformed, inv_log_quant_transform,
min = 0, max = q_999999)) |>
mutate(diff = biomarker - biomarker_untransformed) |>
dplyr::select(diff)
weak_effects_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_untransformed = sapply(biomarker_transformed, inv_log_quant_transform,
min = 0, max = q_999999)) |>
mutate(diff = biomarker - biomarker_untransformed) |>
dplyr::select(diff)
data_generating_mechanism <- function(my_sample, beta_coefficients, prop_missing_MCAR) {
# Generate the data
my_data <- data_generator(my_sample, beta_coefficients)
# Induce MCAR and MAR missingness
my_data <- missing_generator(my_data, prop_missing_MCAR)
# Apply log transform to the biomarker data
# As a caveat, I don't know if this is the best way to go about it
my_data <- my_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform, #3 mutates for organization only
min = 0, max = q_999999)) |>
mutate(biomarker_MCAR_transformed = sapply(biomarker_MCAR, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_MAR_transformed = sapply(biomarker_MAR, log_quant_transform,
min = 0, max = q_999999))
return(my_data)
}
data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects_data,
prop_missing_MCAR = 0.3)
weak_effects_data
data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3)
glm(outcome ~ biomarker + confounder + predictor, #check that log reg still gives correct coefficients
data = DGM_weak,
family = "binomial") |>
tbl_regression(exponentiate = TRUE)
DGM_weak <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3)
glm(outcome ~ biomarker + confounder + predictor, #check that log reg still gives correct coefficients
data = DGM_weak,
family = "binomial") |>
tbl_regression(exponentiate = TRUE)
# With MCAR biomarker data: 95% CI will be wider
glm(outcome ~ biomarker_MCAR + confounder + predictor,
family = "binomial") |>
tbl_regression(exponentiate = TRUE)
# With biomarker data
glm(outcome ~ biomarker + confounder + predictor,
data = DGM_weak
family = "binomial") |>
# With biomarker data
glm(outcome ~ biomarker + confounder + predictor,
data = DGM_weak,
family = "binomial") |>
tbl_regression(exponentiate = TRUE)
# With MCAR biomarker data: 95% CI will be wider
glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_weak,
family = "binomial") |>
tbl_regression(exponentiate = TRUE)
?tbl_regression()
glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_weak,
family = "binomial")
# With MCAR biomarker data: 95% CI will be wider
summary(glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_weak,
family = "binomial"))
# With biomarker data
summary(glm(outcome ~ biomarker + confounder + predictor,
data = DGM_weak,
family = "binomial"))
# With biomarker data
summary(glm(outcome ~ biomarker + confounder + predictor,
data = DGM_weak,
family = "binomial"))
# With MCAR biomarker data: 95% CI will be wider
summary(glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_weak,
family = "binomial"))
# With biomarker data
summary(glm(outcome ~ biomarker + confounder + predictor,
data = DGM_weak,
family = "binomial"))
# Generate data!
DGM_strong <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3)
# With biomarker data
summary(glm(outcome ~ biomarker + confounder + predictor,
data = DGM_strong,
family = "binomial"))
# With MCAR biomarker data: 95% CI will be wider
summary(glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_strong,
family = "binomial"))
# With MCAR biomarker data: 95% CI will be wider
glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_strong,
family = "binomial") |>
broom::tidy()
# With biomarker data
glm(outcome ~ biomarker + confounder + predictor,
data = DGM_strong,
family = "binomial") |>
broom::tidy()
# With MCAR biomarker data: 95% CI will be wider
glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_strong,
family = "binomial") |>
broom::tidy()
# Here are the packages that we need for R (our) life. Very useful things!
library(tidyverse)
library(ggplot2)
library(MASS)
library(purrr) #for looping
library(tictoc) #for checking runtime
# Here are some specialized packages for ease of life to extract visualizations from our simulations
library(gt)
library(gtsummary)
library(broom)
# Here are the packages we need for specific methods:
library(quantreg) #for logistic quantile regression
library(missMethods) #general missing methods
library(mice) #for PMM
# Specialized package to speed up calculations... may or may not use
library(Rcpp) #future implementation for faster calculations in CLQI
# takes in a probability and returns its logit value
logit <- function(prob) {
value <- log(prob / (1 - prob))
return(value)
}
# takes in a value and gives its expit value
expit <- function(x) {
value <- 1 / (1 + exp(-x))
return(value)
}
# transforms a value to its log quantile
log_quant_transform <- function(value, min, max) {
if (is.na(value)) return(NA)  # short-circuit if missing
if (value <= min | value >= max) return(NA)
return(log((value - min) / (max - value)))
}
# untransforms
inv_log_quant_transform <- function(value, min, max) {
new_value <- (exp(value)*max + min) / (1+exp(value))
return(new_value)
}
# this is purely for the data generating mechanism
get_mixture_quantile <- function(p) {
uniroot(
function(q) 0.6 * pchisq(q, 5) + 0.4 * pchisq(q, 8) - p, #this is specific to our DGM
c(0, 1000)
)$root
}
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
# There will be more functions in later scripts, but that is to make life easier, not because they're essential
set.seed(625)
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
strong_effects <- c(logit(0.1), log(1.5), log(0.7), log(0.85))
q_999999 <- get_mixture_quantile(0.999999)
data_generator <- function(sample_size, coefficient_vector) {
# Extract coefficients from the coefficient vector *b*
b_0 <- coefficient_vector[1]
b_1 <- coefficient_vector[2]
b_2 <- coefficient_vector[3]
b_3 <- coefficient_vector[4]
# Generate values from distributions
confounder <- rbinom(sample_size, size = 1, prob = 0.4) #prob of success is 0.4
predictor <- rnorm(sample_size, mean = 0, sd = 1) #this is our continuous predictor
biomarker <- rchisq(sample_size, df = 5 + 3*confounder) #if B = 1, X ~ chisq(8). else, X ~ chisq(5)
# Generate the outcome
outcome <- plogis(b_0 + b_1*biomarker + b_2*confounder + b_3*predictor)
outcome_binary <- rbinom(sample_size, size = 1, prob = outcome)
# Into the dataframe
my_data <- data.frame(
confounder = confounder,
predictor = predictor,
biomarker = biomarker,
outcome = outcome_binary
)
# Get our data
return(my_data)
}
missing_generator <- function(my_data, missing_prop_for_MCAR) {
# Add biomarker variants to induce missingness
my_data <- my_data |>
mutate(biomarker_MCAR = biomarker,
biomarker_MAR = biomarker)
# MCAR
my_data <- missMethods::delete_MCAR(my_data,  #name of data
missing_prop_for_MCAR,  #proportion of data you want missing
"biomarker_MCAR") #name of variable you want to do this
# MAR:
return(my_data)
}
data_generating_mechanism <- function(my_sample, beta_coefficients, prop_missing_MCAR) {
# Generate the data
my_data <- data_generator(my_sample, beta_coefficients)
# Induce MCAR and MAR missingness
my_data <- missing_generator(my_data, prop_missing_MCAR)
# Apply log transform to the biomarker data
# As a caveat, I don't know if this is the best way to go about it
my_data <- my_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform, #3 mutates for organization only
min = 0, max = q_999999)) |>
mutate(biomarker_MCAR_transformed = sapply(biomarker_MCAR, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_MAR_transformed = sapply(biomarker_MAR, log_quant_transform,
min = 0, max = q_999999))
return(my_data)
}
rm(my_sample)
#all the test case stuff
rm(weak_effects_data)
rm(DGM_weak)
rm(strong_effects_data)
rm(DGM_strong)
# Generate data
weak_effects_data <- data_generator(my_sample, weak_effects)
set.seed(625)
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
strong_effects <- c(logit(0.1), log(1.5), log(0.7), log(0.85))
q_999999 <- get_mixture_quantile(0.999999)
data_generator <- function(sample_size, coefficient_vector) {
# Extract coefficients from the coefficient vector *b*
b_0 <- coefficient_vector[1]
b_1 <- coefficient_vector[2]
b_2 <- coefficient_vector[3]
b_3 <- coefficient_vector[4]
# Generate values from distributions
confounder <- rbinom(sample_size, size = 1, prob = 0.4) #prob of success is 0.4
predictor <- rnorm(sample_size, mean = 0, sd = 1) #this is our continuous predictor
biomarker <- rchisq(sample_size, df = 5 + 3*confounder) #if B = 1, X ~ chisq(8). else, X ~ chisq(5)
# Generate the outcome
outcome <- plogis(b_0 + b_1*biomarker + b_2*confounder + b_3*predictor)
outcome_binary <- rbinom(sample_size, size = 1, prob = outcome)
# Into the dataframe
my_data <- data.frame(
confounder = confounder,
predictor = predictor,
biomarker = biomarker,
outcome = outcome_binary
)
# Get our data
return(my_data)
}
missing_generator <- function(my_data, missing_prop_for_MCAR) {
# Add biomarker variants to induce missingness
my_data <- my_data |>
mutate(biomarker_MCAR = biomarker,
biomarker_MAR = biomarker)
# MCAR
my_data <- missMethods::delete_MCAR(my_data,  #name of data
missing_prop_for_MCAR,  #proportion of data you want missing
"biomarker_MCAR") #name of variable you want to do this
# MAR:
return(my_data)
}
data_generating_mechanism <- function(my_sample, beta_coefficients, prop_missing_MCAR) {
# Generate the data
my_data <- data_generator(my_sample, beta_coefficients)
# Induce MCAR and MAR missingness
my_data <- missing_generator(my_data, prop_missing_MCAR)
# Apply log transform to the biomarker data
# As a caveat, I don't know if this is the best way to go about it
my_data <- my_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform, #3 mutates for organization only
min = 0, max = q_999999)) |>
mutate(biomarker_MCAR_transformed = sapply(biomarker_MCAR, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_MAR_transformed = sapply(biomarker_MAR, log_quant_transform,
min = 0, max = q_999999))
return(my_data)
}
rm(my_sample)
#all the test case stuff
rm(weak_effects_data)
rm(DGM_weak)
rm(strong_effects_data)
rm(DGM_strong)
set.seed(625)
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
strong_effects <- c(logit(0.1), log(1.5), log(0.7), log(0.85))
q_999999 <- get_mixture_quantile(0.999999)
data_generator <- function(sample_size, coefficient_vector) {
# Extract coefficients from the coefficient vector *b*
b_0 <- coefficient_vector[1]
b_1 <- coefficient_vector[2]
b_2 <- coefficient_vector[3]
b_3 <- coefficient_vector[4]
# Generate values from distributions
confounder <- rbinom(sample_size, size = 1, prob = 0.4) #prob of success is 0.4
predictor <- rnorm(sample_size, mean = 0, sd = 1) #this is our continuous predictor
biomarker <- rchisq(sample_size, df = 5 + 3*confounder) #if B = 1, X ~ chisq(8). else, X ~ chisq(5)
# Generate the outcome
outcome <- plogis(b_0 + b_1*biomarker + b_2*confounder + b_3*predictor)
outcome_binary <- rbinom(sample_size, size = 1, prob = outcome)
# Into the dataframe
my_data <- data.frame(
confounder = confounder,
predictor = predictor,
biomarker = biomarker,
outcome = outcome_binary
)
# Get our data
return(my_data)
}
missing_generator <- function(my_data, missing_prop_for_MCAR) {
# Add biomarker variants to induce missingness
my_data <- my_data |>
mutate(biomarker_MCAR = biomarker,
biomarker_MAR = biomarker)
# MCAR
my_data <- missMethods::delete_MCAR(my_data,  #name of data
missing_prop_for_MCAR,  #proportion of data you want missing
"biomarker_MCAR") #name of variable you want to do this
# MAR:
return(my_data)
}
data_generating_mechanism <- function(my_sample, beta_coefficients, prop_missing_MCAR) {
# Generate the data
my_data <- data_generator(my_sample, beta_coefficients)
# Induce MCAR and MAR missingness
my_data <- missing_generator(my_data, prop_missing_MCAR)
# Apply log transform to the biomarker data
# As a caveat, I don't know if this is the best way to go about it
my_data <- my_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform, #3 mutates for organization only
min = 0, max = q_999999)) |>
mutate(biomarker_MCAR_transformed = sapply(biomarker_MCAR, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_MAR_transformed = sapply(biomarker_MAR, log_quant_transform,
min = 0, max = q_999999))
return(my_data)
}
# Generate data
weak_effects_data <- data_generator(my_sample, weak_effects)
# Run LOGISTIC regression: isn't good...
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data,
family = "binomial") |>
tbl_regression(exponentiate = TRUE)
# Generate data
strong_effects_data <- data_generator(my_sample, large_effects)
# Generate data
strong_effects_data <- data_generator(my_sample, large_effects)
# Generate data
strong_effects_data <- data_generator(my_sample, strong_effects)
# Run LOGISTIC regression
glm(outcome ~ biomarker + confounder + predictor,
data = strong_effects_data,
family = "binomial") |>
tbl_regression(exponentiate = TRUE)
weak_effects_data <- data_generator(my_sample, weak_effects)
missing_test_case <- missing_generator(weak_effects_data, 0.30) |>
dplyr::select(biomarker_MCAR)
#should be 300
sum(is.na(missing_test_case$biomarker_MCAR))
weak_effects_data <- data_generator(my_sample, weak_effects)
weak_effects_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform,
min = 0, max = q_999999)) |>
mutate(biomarker_untransformed = sapply(biomarker_transformed, inv_log_quant_transform,
min = 0, max = q_999999)) |>
mutate(diff = biomarker - biomarker_untransformed) |> # see how close the original and untransformed vals are
dplyr::select(diff) #look into it.
# Generate data!
DGM_weak <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3)
# With biomarker data
summary(glm(outcome ~ biomarker + confounder + predictor,
data = DGM_weak,
family = "binomial"))
# With MCAR biomarker data: 95% CI will be wider
summary(glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_weak,
family = "binomial"))
rm(my_sample)
#all the test case stuff
rm(weak_effects_data)
rm(DGM_weak)
rm(strong_effects_data)
rm(DGM_strong)
data_generating_mechanism <- function(my_sample, beta_coefficients, prop_missing_MCAR,
min_val = 0, max_val) {
# Generate the data
my_data <- data_generator(my_sample, beta_coefficients)
# Induce MCAR and MAR missingness
my_data <- missing_generator(my_data, prop_missing_MCAR)
# Apply log transform to the biomarker data
# As a caveat, I don't know if this is the best way to go about it
my_data <- my_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform, #3 mutates for organization only
min = min_val, max = max_val)) |>
mutate(biomarker_MCAR_transformed = sapply(biomarker_MCAR, log_quant_transform,
min = min_val, max = max_val)) |>
mutate(biomarker_MAR_transformed = sapply(biomarker_MAR, log_quant_transform,
min = min_val, max = max_val))
return(my_data)
}
# Generate data!
DGM_weak <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3,
min_val = 0,
max_val = q_999999)
set.seed(625)
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7), log(0.85))
strong_effects <- c(logit(0.1), log(1.5), log(0.7), log(0.85))
q_999999 <- get_mixture_quantile(0.999999)
data_generator <- function(sample_size, coefficient_vector) {
# Extract coefficients from the coefficient vector *b*
b_0 <- coefficient_vector[1]
b_1 <- coefficient_vector[2]
b_2 <- coefficient_vector[3]
b_3 <- coefficient_vector[4]
# Generate values from distributions
confounder <- rbinom(sample_size, size = 1, prob = 0.4) #prob of success is 0.4
predictor <- rnorm(sample_size, mean = 0, sd = 1) #this is our continuous predictor
biomarker <- rchisq(sample_size, df = 5 + 3*confounder) #if B = 1, X ~ chisq(8). else, X ~ chisq(5)
# Generate the outcome
outcome <- plogis(b_0 + b_1*biomarker + b_2*confounder + b_3*predictor)
outcome_binary <- rbinom(sample_size, size = 1, prob = outcome)
# Into the dataframe
my_data <- data.frame(
confounder = confounder,
predictor = predictor,
biomarker = biomarker,
outcome = outcome_binary
)
# Get our data
return(my_data)
}
missing_generator <- function(my_data, missing_prop_for_MCAR) {
# Add biomarker variants to induce missingness
my_data <- my_data |>
mutate(biomarker_MCAR = biomarker,
biomarker_MAR = biomarker)
# MCAR
my_data <- missMethods::delete_MCAR(my_data,  #name of data
missing_prop_for_MCAR,  #proportion of data you want missing
"biomarker_MCAR") #name of variable you want to do this
# MAR:
return(my_data)
}
data_generating_mechanism <- function(my_sample, beta_coefficients, prop_missing_MCAR,
min_val = 0, max_val) {
# Generate the data
my_data <- data_generator(my_sample, beta_coefficients)
# Induce MCAR and MAR missingness
my_data <- missing_generator(my_data, prop_missing_MCAR)
# Apply log transform to the biomarker data
# As a caveat, I don't know if this is the best way to go about it
my_data <- my_data |>
mutate(biomarker_transformed = sapply(biomarker, log_quant_transform, #3 mutates for organization only
min = min_val, max = max_val)) |>
mutate(biomarker_MCAR_transformed = sapply(biomarker_MCAR, log_quant_transform,
min = min_val, max = max_val)) |>
mutate(biomarker_MAR_transformed = sapply(biomarker_MAR, log_quant_transform,
min = min_val, max = max_val))
return(my_data)
}
# Generate data!
DGM_weak <- data_generating_mechanism(my_sample = my_sample,
beta_coefficients = weak_effects,
prop_missing_MCAR = 0.3,
min_val = 0,
max_val = q_999999)
# With biomarker data
summary(glm(outcome ~ biomarker + confounder + predictor,
data = DGM_weak,
family = "binomial"))
# With MCAR biomarker data: 95% CI will be wider
summary(glm(outcome ~ biomarker_MCAR + confounder + predictor,
data = DGM_weak,
family = "binomial"))
