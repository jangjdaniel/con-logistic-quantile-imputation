geom_vline(xintercept =log(1.2))
ggplot(data = simulations, aes(x = estimate_values_PMM)) +
geom_density() +
geom_vline(xintercept = log(1.2))
ggplot(data = simulations, aes(x = estimate_values_CLQI)) +
geom_density() +
geom_vline(xintercept = log(1.2))
#necessary libraries
library(tidyverse)
library(ggplot2)
library(quantreg)
library(missMethods)
library(MASS)
library(purrr)
library(tictoc)
library(mice) #for PMM
#logit and expit functions for myself
logit <- function(prob) {
value <- log(prob / (1 - prob))
return(value)
}
expit <- function(x) {
value <- 1 / (1 + exp(-x))
return(value)
}
#now some other transformation functions
log_quant_transform <- function(value, min, max) {
if (is.na(value)) return(NA)  # short-circuit if missing
if (value <= min | value >= max) return(NA)
return(log((value - min) / (max - value)))
}
inv_log_quant_transform <- function(value, min, max) {
new_value <- (exp(value)*max + min) / (1+exp(value))
return(new_value)
}
data_generation <- function(sample_size, missing_prop,
b_0 = logit(0.1), b_1 = log(1.2), b_2 = log(0.7)) {
#generate my data
B <- rbinom(sample_size, size = 1, prob = 0.4)
X <- rchisq(sample_size, df = 5 + 3*B) #if B = 1, X ~ chisq(8)
Y <- plogis(b_0 + b_1*X + b_2*B) #we have some effects
Y_bin <- rbinom(sample_size, size = 1, prob = Y)
my_data <- data.frame(
confounder = B,
biomarker = X,
missing_biomarker = X,
outcome = Y_bin
)
my_data <- delete_MCAR(my_data, missing_prop, "missing_biomarker") #make missing_prop percent of data missing MCAR
#now we create the transformed variable... sapply is NOT working
my_data$transformed_biomarker <- NA
for(i in 1:nrow(my_data)) {
if(is.na(my_data$missing_biomarker[i])) {
my_data$transformed_biomarker[i] <- NA}
else {
my_data$transformed_biomarker[i] <- log_quant_transform(my_data$missing_biomarker[i],
min = 0, max = max(my_data$biomarker, na.rm = TRUE))}
}
return(my_data)
}
created_data <- data_generation(sample_size = 2000, missing_prop = 0.5)
#FIRST CHECK: Logistic Regression
regression_results <- glm(outcome ~ biomarker + confounder,
data = created_data,
family = "binomial")
summary(regression_results)
log(1.2) #we're good
created_data
# Convert confounder to a factor for better labeling and aesthetics
created_data$confounder <- factor(created_data$confounder, levels = c(0, 1), labels = c("Confounder = 0", "Confounder = 1"))
# Create the plot with overlaid density curves
ggplot(data = created_data, aes(x = biomarker, fill = confounder, color = confounder)) +
geom_density(alpha = 0.5) +
labs(
title = "Biomarker Distribution by Confounder",
x = "Biomarker",
y = "Density"
) +
scale_fill_manual(values = c("skyblue", "orange")) +  # Custom colors for filling
scale_color_manual(values = c("blue", "red"))        # Custom border colors
coefficient_data <- data.frame()
suppressWarnings({
for(i in seq(from = 0.01, to = 0.99, by = 0.01)) {
reg_coeff <- rq(transformed_biomarker ~ outcome + confounder,
data = created_data,
tau=i)
#create the data frame
new_data <- data.frame(
b_0 = reg_coeff$coefficients[1],
b_outcome = reg_coeff$coefficients[2],
b_confounder = reg_coeff$coefficients[3],
quant = i)
coefficient_data <- rbind(coefficient_data, new_data) #add to new iterations
}
})
coefficient_data
#here's the function format
coefficient_generator <- function(my_data) {
suppressWarnings({
for(i in seq(from = 0.01, to = 0.99, by = 0.01)) {
reg_coeff <- rq(transformed_biomarker ~ outcome + confounder,
data = my_data,
tau=i)
#create the data frame
new_data <- data.frame(
b_0 = reg_coeff$coefficients[1],
b_outcome = reg_coeff$coefficients[2],
b_confounder = reg_coeff$coefficients[3],
quant = i)
coefficient_data <- rbind(coefficient_data, new_data) #add to new iterations
}
})
return(coefficient_data)
}
coefficient_generator(created_data) #should be the same
uniform_values <- function() {
u <- runif(1, min = 1, max = 99) #aka from 0.01 to 0.99
#all the values we need from the uniform
floor_u <- floor(u)
mod_u <- (u - floor(u))
next_u <- ceiling(u)
#now putting this into a vector
my_u <- c(u, floor_u, mod_u, next_u)
return(my_u)
}
imputation_algorithm <- function(my_coefficients, my_data, row_index) {
u_vector <- uniform_values() #get the uniform values and extract necessary information
floor_quantile <- my_coefficients[u_vector[2], ] #floor
modulus <- u_vector[3] #modulus
ceiling_quantile <- my_coefficients[u_vector[4], ] #ceiling
#need to calculate regression values... really messy don't look at this
lower_quantile_value <- floor_quantile$b_0 +
(floor_quantile$b_outcome * my_data[row_index,]$outcome) + (floor_quantile$b_confounder * my_data[row_index,]$confounder)
upper_quantile_value <- ceiling_quantile$b_0 +
(ceiling_quantile$b_outcome * my_data[row_index,]$outcome) + (ceiling_quantile$b_confounder * my_data[row_index,]$confounder)
#now the imputation values!
imputation_value_transformed <- ((1-modulus)*lower_quantile_value) + (modulus*upper_quantile_value)
return(imputation_value_transformed)
}
#here are the data that we need
data_for_imp <- data_generation(sample_size = 10000, missing_prop = 0.8)
max(data_for_imp$biomarker, na.rm=TRUE)
coefficient_data_for_imp <- coefficient_generator(data_for_imp)
for(row_index in 1:nrow(data_for_imp)) {
if(is.na(data_for_imp$transformed_biomarker[row_index])) {
imputed_value <- imputation_algorithm(my_coefficients = coefficient_data_for_imp,
my_data = data_for_imp,
row_index = row_index)
data_for_imp$transformed_biomarker[row_index] <- imputed_value
}
}
data_for_imp
data_for_imp <- data_for_imp |>
mutate(untransformed_imputed_biomarker = sapply(transformed_biomarker, inv_log_quant_transform,
min = 0, max = max(data_for_imp$biomarker, na.rm = TRUE)))
data_for_imp_new <- data_for_imp
data_for_imp_new$confounder <- factor(data_for_imp_new$confounder, levels = c(0, 1), labels = c("Confounder = 0", "Confounder = 1"))
# Create the plot with overlaid density curves
ggplot(data = data_for_imp_new, aes(x = biomarker, fill = confounder, color = confounder)) +
geom_density(alpha = 0.5) +
labs(
title = "Biomarker Distribution by Confounder",
x = "Biomarker",
y = "Density"
) +
scale_fill_manual(values = c("skyblue", "orange")) +  # Custom colors for filling
scale_color_manual(values = c("blue", "red"))        # Custom border colors
ggplot(data = data_for_imp_new, aes(x = untransformed_imputed_biomarker, fill = confounder, color = confounder)) +
geom_density(alpha = 0.5) +
labs(
title = "Imputed Biomarker Distribution by Confounder",
x = "Biomarker",
y = "Density"
) +
scale_fill_manual(values = c("skyblue", "orange")) +  # Custom colors for filling
scale_color_manual(values = c("blue", "red")) +       # Custom border colors
stat_function(fun = dchisq, args = list(df = 5), aes(color = NULL), linetype = "dashed", size = 1, color = "black") +
stat_function(fun = dchisq, args = list(df = 8), aes(color = NULL), linetype = "dotted", size = 1, color = "darkgreen")
#necessary libraries
library(tidyverse)
library(ggplot2)
library(quantreg)
library(missMethods)
library(MASS)
library(purrr)
library(tictoc)
library(mice) #for PMM
#logit and expit functions for myself
logit <- function(prob) {
value <- log(prob / (1 - prob))
return(value)
}
expit <- function(x) {
value <- 1 / (1 + exp(-x))
return(value)
}
#now some other transformation functions
log_quant_transform <- function(value, min, max) {
if (is.na(value)) return(NA)  # short-circuit if missing
if (value <= min | value >= max) return(NA)
return(log((value - min) / (max - value)))
}
inv_log_quant_transform <- function(value, min, max) {
new_value <- (exp(value)*max + min) / (1+exp(value))
return(new_value)
}
data_generation <- function(sample_size, missing_prop,
b_0 = logit(0.1), b_1 = log(1.2), b_2 = log(0.7)) {
#generate my data
B <- rbinom(sample_size, size = 1, prob = 0.4)
X <- rchisq(sample_size, df = 5 + 3*B) #if B = 1, X ~ chisq(8)
Y <- plogis(b_0 + b_1*X + b_2*B) #we have some effects
Y_bin <- rbinom(sample_size, size = 1, prob = Y)
my_data <- data.frame(
confounder = B,
biomarker = X,
missing_biomarker = X,
outcome = Y_bin
)
my_data <- delete_MCAR(my_data, missing_prop, "missing_biomarker") #make missing_prop percent of data missing MCAR
#now we create the transformed variable... sapply is NOT working
my_data$transformed_biomarker <- NA
for(i in 1:nrow(my_data)) {
if(is.na(my_data$missing_biomarker[i])) {
my_data$transformed_biomarker[i] <- NA}
else {
my_data$transformed_biomarker[i] <- log_quant_transform(my_data$missing_biomarker[i],
min = 0, max = max(my_data$biomarker, na.rm = TRUE))}
}
return(my_data)
}
created_data <- data_generation(sample_size = 2000, missing_prop = 0.5)
#FIRST CHECK: Logistic Regression
regression_results <- glm(outcome ~ biomarker + confounder,
data = created_data,
family = "binomial")
summary(regression_results)
log(1.2) #we're good
created_data
# Convert confounder to a factor for better labeling and aesthetics
created_data$confounder <- factor(created_data$confounder, levels = c(0, 1), labels = c("Confounder = 0", "Confounder = 1"))
# Create the plot with overlaid density curves
ggplot(data = created_data, aes(x = biomarker, fill = confounder, color = confounder)) +
geom_density(alpha = 0.5) +
labs(
title = "Biomarker Distribution by Confounder",
x = "Biomarker",
y = "Density"
) +
scale_fill_manual(values = c("skyblue", "orange")) +  # Custom colors for filling
scale_color_manual(values = c("blue", "red"))        # Custom border colors
coefficient_data <- data.frame()
suppressWarnings({
for(i in seq(from = 0.01, to = 0.99, by = 0.01)) {
reg_coeff <- rq(transformed_biomarker ~ outcome + confounder,
data = created_data,
tau=i)
#create the data frame
new_data <- data.frame(
b_0 = reg_coeff$coefficients[1],
b_outcome = reg_coeff$coefficients[2],
b_confounder = reg_coeff$coefficients[3],
quant = i)
coefficient_data <- rbind(coefficient_data, new_data) #add to new iterations
}
})
coefficient_data
#here's the function format
coefficient_generator <- function(my_data) {
suppressWarnings({
for(i in seq(from = 0.01, to = 0.99, by = 0.01)) {
reg_coeff <- rq(transformed_biomarker ~ outcome + confounder,
data = my_data,
tau=i)
#create the data frame
new_data <- data.frame(
b_0 = reg_coeff$coefficients[1],
b_outcome = reg_coeff$coefficients[2],
b_confounder = reg_coeff$coefficients[3],
quant = i)
coefficient_data <- rbind(coefficient_data, new_data) #add to new iterations
}
})
return(coefficient_data)
}
coefficient_generator(created_data) #should be the same
uniform_values <- function() {
u <- runif(1, min = 1, max = 99) #aka from 0.01 to 0.99
#all the values we need from the uniform
floor_u <- floor(u)
mod_u <- (u - floor(u))
next_u <- ceiling(u)
#now putting this into a vector
my_u <- c(u, floor_u, mod_u, next_u)
return(my_u)
}
imputation_algorithm <- function(my_coefficients, my_data, row_index) {
u_vector <- uniform_values() #get the uniform values and extract necessary information
floor_quantile <- my_coefficients[u_vector[2], ] #floor
modulus <- u_vector[3] #modulus
ceiling_quantile <- my_coefficients[u_vector[4], ] #ceiling
#need to calculate regression values... really messy don't look at this
lower_quantile_value <- floor_quantile$b_0 +
(floor_quantile$b_outcome * my_data[row_index,]$outcome) + (floor_quantile$b_confounder * my_data[row_index,]$confounder)
upper_quantile_value <- ceiling_quantile$b_0 +
(ceiling_quantile$b_outcome * my_data[row_index,]$outcome) + (ceiling_quantile$b_confounder * my_data[row_index,]$confounder)
#now the imputation values!
imputation_value_transformed <- ((1-modulus)*lower_quantile_value) + (modulus*upper_quantile_value)
return(imputation_value_transformed)
}
#here are the data that we need
data_for_imp <- data_generation(sample_size = 10000, missing_prop = 0.8)
max(data_for_imp$biomarker, na.rm=TRUE)
coefficient_data_for_imp <- coefficient_generator(data_for_imp)
for(row_index in 1:nrow(data_for_imp)) {
if(is.na(data_for_imp$transformed_biomarker[row_index])) {
imputed_value <- imputation_algorithm(my_coefficients = coefficient_data_for_imp,
my_data = data_for_imp,
row_index = row_index)
data_for_imp$transformed_biomarker[row_index] <- imputed_value
}
}
data_for_imp
data_for_imp <- data_for_imp |>
mutate(untransformed_imputed_biomarker = sapply(transformed_biomarker, inv_log_quant_transform,
min = 0, max = max(data_for_imp$biomarker, na.rm = TRUE)))
data_for_imp_new <- data_for_imp
data_for_imp_new$confounder <- factor(data_for_imp_new$confounder, levels = c(0, 1), labels = c("Confounder = 0", "Confounder = 1"))
# Create the plot with overlaid density curves
ggplot(data = data_for_imp_new, aes(x = biomarker, fill = confounder, color = confounder)) +
geom_density(alpha = 0.5) +
labs(
title = "Biomarker Distribution by Confounder",
x = "Biomarker",
y = "Density"
) +
scale_fill_manual(values = c("skyblue", "orange")) +  # Custom colors for filling
scale_color_manual(values = c("blue", "red"))        # Custom border colors
ggplot(data = data_for_imp_new, aes(x = untransformed_imputed_biomarker, fill = confounder, color = confounder)) +
geom_density(alpha = 0.5) +
labs(
title = "Imputed Biomarker Distribution by Confounder",
x = "Biomarker",
y = "Density"
) +
scale_fill_manual(values = c("skyblue", "orange")) +  # Custom colors for filling
scale_color_manual(values = c("blue", "red")) +       # Custom border colors
stat_function(fun = dchisq, args = list(df = 5), aes(color = NULL), linetype = "dashed", size = 1, color = "black") +
stat_function(fun = dchisq, args = list(df = 8), aes(color = NULL), linetype = "dotted", size = 1, color = "darkgreen")
my_glm <- glm(outcome ~ untransformed_imputed_biomarker + confounder,
data = data_for_imp,
family = "binomial")
summary(my_glm)$coefficients[2]
log(1.2)
data_for_imp_zero <- data_for_imp |>
filter(confounder == 0)
data_for_imp_one <- data_for_imp |>
filter(confounder == 1)
ks.test(data_for_imp_zero$untransformed_imputed_biomarker, "pchisq", df = 5)
ks.test(data_for_imp_one$untransformed_imputed_biomarker, "pchisq", df = 8)
wasserstein_1_distance <- function(variable, my_df) {
empirical_cdf <- ecdf(variable)
u <- seq(0, 0.9999999, length.out = 1000) #we will be working with the quantile version. Integration approximation
#now get the quantiles
empirical_quantiles <- quantile(variable, probs = u)
theoretical_quantiles <- qchisq(u, df = my_df)
return(mean(as.numeric(abs(empirical_quantiles - theoretical_quantiles))))
}
wasserstein_1_distance(data_for_imp_zero$untransformed_imputed_biomarker, my_df = 5)
wasserstein_1_distance(data_for_imp_one$untransformed_imputed_biomarker, my_df = 8)
#rubin's rule for standard error is complicated, so just keep it in a simple function
rubin_rule_SE <- function(values_MI, SE_MI) { #both inputs are vectors
variance_within_MI <- mean((SE_MI)^2)
variance_between_MI <- sum((values_MI - mean(values_MI))^2) / (length(values_MI) - 1)
total_variance <- variance_within_MI + variance_between_MI + (variance_between_MI / length(values_MI))
return(sqrt(total_variance))
}
coverage <- function(parameter, SE, t_star, true_val) {
if(parameter - t_star*sqrt(SE) <= true_val & true_val <= parameter + t_star*sqrt(SE)) {
return(1)
} else{
return(0)
}
}
power <- function(values_MI, SE_MI, num_MI) {
#t stat calculation
wald <- mean(values_MI) / rubin_rule_SE(values_MI, SE_MI)
#df calculation
variance_within_MI <- mean((SE_MI)^2)
variance_between_MI <- sum((values_MI - mean(values_MI))^2) / (length(values_MI) - 1)
my_frac <- variance_between_MI / (num_MI * variance_within_MI)
df <- ((num_MI - 1) / (1 + my_frac)^2)
#our p-value
p_value <- 2 * (1 - pt(abs(wald), df))
#return 1 if we reject H0 (from DGM, we know H1 to be true)
return(ifelse(p_value < 0.05, 1, 0))
}
This is the
source("C:/Users/danie/OneDrive/Desktop/con-logistic-quantile-regression/scripts/00_CLQI_functions_and_packages.R", echo=TRUE)
data_generator <- function(sample_size, coefficient_vector) {
# Extract coefficients from the coefficient vector *b*
b_0 <- coefficient_vector[1]
b_1 <- coefficient_vector[2]
b_2 <- coefficient_vector[3]
b_3 <- coefficient_vector[4]
#generate values from distributions
confounder <- rbinom(sample_size, size = 1, prob = 0.4) #prob of success is 0.4
predictor <- rnorm(sample_size, mean = 0, sd = 1) #this is our continuous predictor
biomarker <- rchisq(sample_size, df = 5 + 3*confounder) #if B = 1, X ~ chisq(8). else, X ~ chisq(5)
outcome <- plogis(b_0 + b_1*biomarker + b_2*confounder + b_3*predictor)
outcome_binary <- rbinom(sample_size, size = 1, prob = Y)
#taking all these elements and putting them into a data frame
my_data <- data.frame(
confounder = confounder,
predictor = predictor,
biomarker = biomarker,
outcome = outcome_binary
)
return(my_data) #return dataframe
}
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7),  log(0.85))
data_generator(my_sample, weak_effects)
data_generator(my_sample, weak_effects)
data_generator(my_sample, weak_effects)
data_generator <- function(sample_size, coefficient_vector) {
# Extract coefficients from the coefficient vector *b*
b_0 <- coefficient_vector[1]
b_1 <- coefficient_vector[2]
b_2 <- coefficient_vector[3]
b_3 <- coefficient_vector[4]
# Generate values from distributions
confounder <- rbinom(sample_size, size = 1, prob = 0.4) #prob of success is 0.4
predictor <- rnorm(sample_size, mean = 0, sd = 1) #this is our continuous predictor
biomarker <- rchisq(sample_size, df = 5 + 3*confounder) #if B = 1, X ~ chisq(8). else, X ~ chisq(5)
# Generate the outcome
outcome <- plogis(b_0 + b_1*biomarker + b_2*confounder + b_3*predictor)
outcome_binary <- rbinom(sample_size, size = 1, prob = outcome)
# Into the dataframe
my_data <- data.frame(
confounder = confounder,
predictor = predictor,
biomarker = biomarker,
outcome = outcome_binary
)
# Get our data
return(my_data)
}
my_sample <- 1000
weak_effects <- c(logit(0.1), log(1.1), log(0.7),  log(0.85))
data_generator(my_sample, weak_effects)
weak_effects_data <- data_generator(my_sample, weak_effects)
weak_effects_data
# Run regression
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data) |>
tbl_regression()
# Here are the packages that we need for R (our) life. Very useful things!
library(tidyverse)
library(ggplot2)
library(MASS)
library(purrr) #for looping
library(tictoc) #for checking runtime
# Here are some specialized packages for ease of life to extract visualizations from our simulations
library(gt)
library(gtsummary)
install.packages("gtsummary")
install.packages("gtsummary")
# Generate data
weak_effects_data <- data_generator(my_sample, weak_effects)
# Run regression
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data) |>
tbl_regression()
?tbl_regression()
# Run regression
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data) |>
tidy()
library(broom)
library(gtsummary)
# Here are some specialized packages for ease of life to extract visualizations from our simulations
library(gt)
# Run regression
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data) |>
tidy()
# Run regression
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data) |>
tbl_regression(exponentiate = TRUE)
# Run regression
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data) |>
tbl_regression(exponentiate = TRUE)
library(gtsummary)
install.packages("glue")
install.packages("glue")
library(gtsummary)
# Run regression
glm(outcome ~ biomarker + confounder + predictor,
data = weak_effects_data) |>
tbl_regression(exponentiate = TRUE)
?tbl_regression()
updateR()
install.packages("installr")
library(installr)
updateR()
updateR()
TRUE
1
1
